1; 
// 값은 존재하고 있는 상태
// ** 하지만 활용은 되지 않은 상태
// ====> 변수를 사용하는 이유에 대해
// 데이터 타입이 숫자(number)인 저 '1'이라는 값을 쓸 방법이 없다. ===> 변수를 사용하는 이유


let one;
// 변수 선언만 되어있고, 값은 없는 상태
// === 변수 선언은 했고, 값은 무엇을 '가리키지는' 않은 상태

// console.log(one);
// ==> 오류는 나지 않지만, undefined가 나온다. 값이 없다는 뜻이다.


// 따라서, 식별을 위해서 값과 변수를 *대입*하는 과정을 해줘야된다. ====> "="(이퀄) 표시


let test = 1;
// 변수 선언과 동시에 값을 가리켰다. === *초기화*되었다.
// 값이 할당이 되면 RAM이라는 '메모리'에 일단 담긴다. '식별할 방법'이 필요하다 ==> '번수의 큰 의미'

// console.log(test);
// ==> '1'이라고 제대로 나온다.


// const two;
// console.log(two);
// SyntaxError: Missing initializer in const declaration
// ==> 작성법 에러 : 상수 선언할 때 값이 초기화가 안되어서 못찾았다는 말.
// ==> let과 const의 차이점이다.
// ==> const는 변수 선언과 동시에 값도 함께 가리키도록 만들어야 한다. (** const의 '규칙')
// **에러가 났다 === 해결만 한다면 무결점

/*

권장하는 방법
* 변수 선언 방법(===값을 가리키게 하는 방법) *
var, let, const

1. var : 너무 유연해서 js를 욕먹게 만든 일등공신이다. (==> 오류를 찾지 못한다.) 구버전까지 지원해야되는 것이 아니라면 사용하지 않는 것을 추천.

2. let : 중괄호 안에서만 효력을 발생하는 'var'보다 명확한 구석이 있다.
내가 핸들러로 사용하고싶다. 다루고자 하는 변수가 있다 ==> let을 권장한다.

3. const : 가장 권장되는 형태. 98%쯤은 '상수'를 많이 쓴다. '변하지 않게 붙잡아 가면서 작업하겠다' 라는 암묵적인 관습.

문서 API ==> 바꿀 일이 없다. get할 때는 무조건 cosnt.
에러가 난다. ===> 정상. 당연함.
어설프게 맞아떨어진다.===> 이게 문제.

*/